// File: Blinken.c - Blinken einer DIODE
//
// XE167.h muss eingebunden werden, weil dann die symbolischen
// Namen wie z.B. P10_OUT_P0 verwendet werden können und nicht
// Adresse von P10_OUT_P0 verwendet werden muss!
//
#include <XE167F.h>
#define TIMER_FREQ 2500 //in kHz
volatile unsigned int counter1,counter2;
// Funktion wait() braucht ~1 sek.

typedef unsigned int uword;

void MAIN_vUnlockProtecReg(void)
{
uword uwPASSWORD;
SCU_SLC = 0xAAAA; // command 0
SCU_SLC = 0x5554; // command 1
uwPASSWORD = SCU_SLS & 0x00FF;
uwPASSWORD = (~uwPASSWORD) & 0x00FF;
SCU_SLC = 0x9600 | uwPASSWORD; // command 2
SCU_SLC = 0x0000; // command 3
}

void MAIN_vLockProtecReg(void)
{
uword uwPASSWORD;
SCU_SLC = 0xAAAA; // command 0
SCU_SLC = 0x5554; // command 1
uwPASSWORD = SCU_SLS & 0x00FF;
uwPASSWORD = (~uwPASSWORD) & 0x00FF;
SCU_SLC = 0x9600 | uwPASSWORD; // command 2
SCU_SLC = 0x1800; // command 3; new PASSWOR is 0x00
uwPASSWORD = SCU_SLS & 0x00FF;
uwPASSWORD = (~uwPASSWORD) & 0x00FF;
SCU_SLC = 0x8E00 | uwPASSWORD; // command 4
}

void toggle_GP_LED(int LED)
{
switch (LED) {
case 0:
P10_OUT_P0 = ~P10_OUT_P0;
break;
case 1:
P10_OUT_P1 = ~P10_OUT_P1;
break;
case 2:
P10_OUT_P2 = ~P10_OUT_P2;
break;
case 3:
P10_OUT_P3 = ~P10_OUT_P3;
break;
case 4:
P10_OUT_P4 = ~P10_OUT_P4;
break;
case 5:
P10_OUT_P5 = ~P10_OUT_P5;
break;
case 6:
P10_OUT_P6 = ~P10_OUT_P6;
break;
case 7:
P10_OUT_P7 = ~P10_OUT_P7;
break;
default:
break;
}
}

void wait()
{
counter1 = 0x18; //war vorher 0x40
while (counter1 > 0)
{
counter1--;
counter2 = 0xFFFF;
while (counter2 > 0)
{
counter2--;
}
}
}
/*
void Left_to_right()
{
int i=0;
do {
toggle_GP_LED(i);
wait();
toggle_GP_LED(i);
i++;
}while(i<8);
}

void Right_to_left()
{
int i=7;
do {
toggle_GP_LED(i);
wait();
toggle_GP_LED(i);
i--;
}while(i>=0);
}*/

/*
Bit 15: 1 // Reload from register CAPREL Enabled
Bit 14: // 0 -> Timer T6 is not cleared on a capture event
Bit 13: // does nothing
Bit 12: // [12:11] Selects the basic clock,
bit 11: // 00 for f/4
Bit 10: // Timer T6 Overflow Toggle Latch: Toggles on each overflow/underflow of T6
bit 9: // Overflow/Underflow Output Enable
Bit 8: // Timer T6 External Up/Down Enable: 0 -> Input T6EUD is disconnected
Bit 7: 1 // 1: counts down
Bit 6: // Timer T6 Run Bit: 0 -> Timer T6 stops 1 -> Timer T6 runs
Bit 5:0 // Timer T6 Mode Control [5:3] 000 Timer Mode
Bit 4:0
Bit 3:0
Bit 2:
Bit 1:
Bit 0:
*/

void StartTimer()
{
GPT12E_T6CON|=1<<6;
}

void StopTimer()
{
GPT12E_T6CON&=0xFFDF; //1111 1111 1101 1111
}

void SetTimer(int time) //in ms
{
int steps = time*TIMER_FREQ; //in
GPT12E_CAPREL=steps;
}

// Interrupt Routine:

int i=0;

void left_to_right()
{
if(i>7) i=0;
if(i<8)
{
if(i>1)
toggle_GP_LED(i-1);
else
toggle_GP_LED(7);
toggle_GP_LED(i);
i++;
}
}

void GPT2_viT6() interrupt 0x24
{
left_to_right(); // define global variable i;
}

void main(void)
{
MAIN_vUnlockProtecReg();
GPT12E_KSCCFG = 0x0003;
MAIN_vLockProtecReg();

  GPT12E_T6CON=0;
GPT12E_T6CON|=1<<7; // Bit 7 (Runter zählen)
GPT12E_T6CON|=1<<15; // Bit 15 (Reload from register CAPREL Enabled)
//GPT12E_T6CON|=1<<5 // Timer T6 runs,   GPT12E_T6CON&=0xFFDF would stop Timer T6
	GPT12E_T6IC = 0x0050; //IE = 1, ILVL = 4, GLVL = 0
	PSW_IEN = 1;
// interrupt request gets activated in "T6IRQ" when Timer T6 has an overflow/underflow



	
// Initialize IO
// Pin 0 von Port 10 wird auf "OUT" gesetzt
P10_IOCR00 = 0x0080;
P10_IOCR01 = 0x0080;
P10_IOCR02 = 0x0080;
P10_IOCR03 = 0x0080;
P10_IOCR04 = 0x0080;
P10_IOCR05 = 0x0080;
P10_IOCR06 = 0x0080;
P10_IOCR07 = 0x0080;
// Pin 0 von Port 10 erhält den Wert 1
P10_OUT_P0 = 0x1;
P10_OUT_P1 = 0x1;
P10_OUT_P2 = 0x1;
P10_OUT_P3 = 0x1;
P10_OUT_P4 = 0x1;
P10_OUT_P5 = 0x1;
P10_OUT_P6 = 0x1;
P10_OUT_P7 = 0x1;

P4_IN_P4 = 0x0000;
	
//Left_to_right();
	SetTimer(200);
	
while (1)
{
		StartTimer();
		wait(1000);
}

}

//vol 2, seite 72 Frequenzen (14.2.6 GPT2 Clock Signal Control)
